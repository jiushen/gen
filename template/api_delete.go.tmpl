{{define "api_delete.go.tmpl"}}
// Delete{{.StructName}} Delete a single record from {{.TableName}} table in the {{.DatabaseName}} database
// @Summary Delete a record from {{.TableName}}
// @Description Delete a single record from {{.TableName}} table in the {{.DatabaseName}} database
// @Tags {{.StructName}}
// @Accept  json
// @Produce  json{{ if eq .Sharding.Table .TableName }}
// @Param  argKfuin path int64 true "{{.Sharding.Key}}"{{end}}
{{range $field := .TableInfo.CodeFields}}{{ if $field.PrimaryKeyArgName}}// @Param  {{ $field.PrimaryKeyArgName }} path {{ $field.SQLMapping.SwaggerType }} true "{{ $field.ColumnMeta.Name }}"{{end}}{{end}}
// @Success 204 {object} {{.modelPackageName}}.{{.StructName}}
// @Failure 400 {object} {{.apiPackageName}}.HTTPError
// @Failure 500 {object} {{.apiPackageName}}.HTTPError
// @Router /{{.StructName | toLower}}{{ if eq .Sharding.Table .TableName }}/{argKfuin}{{end}}{{range $field := .TableInfo.CodeFields}}{{ if $field.PrimaryKeyArgName}}/{ {{- $field.PrimaryKeyArgName -}} }{{end}}{{end}} [delete]
// http DELETE "{{$.serverScheme}}://{{$.serverHost}}{{if ne $.serverPort 80}}:{{$.serverPort}}{{end}}/{{.StructName | toLower}}{{range $field := .TableInfo.CodeFields}}{{ if $field.PrimaryKeyArgName}}/{{ $field.FakeData }}{{end}}{{end}}{{ if eq .Sharding.Table .TableName }}/12{{end}}" X-Api-User:user123
func Delete{{.StructName}}(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	ctx := initializeContext(r)

	{{ if eq .Sharding.Table .TableName }}
    	argKfuin, err := parseInt64(ps, "argKfuin")
    	if err != nil {
    		returnError(ctx, w, r, err)
    		return
    	}
    {{end}}

{{range $field := .TableInfo.CodeFields}}
{{ if $field.PrimaryKeyArgName }}
	{{$field.PrimaryKeyArgName}}, err := {{$field.PrimaryKeyFieldParser}}(ps, "{{$field.PrimaryKeyArgName}}")
	if err != nil {
		returnError(ctx, w, r, err)
		return
	}
{{end}}{{end}}

	if err := ValidateRequest(ctx, r, "{{.TableName}}", {{.modelPackageName}}.Delete); err != nil{
		returnError(ctx, w, r, err)
		return
	}

	rowsAffected, err := {{.daoPackageName}}.Delete{{.StructName}}(ctx,{{ if eq .Sharding.Table .TableName }}argKfuin, {{end}}{{range $field := .TableInfo.CodeFields}} {{ if $field.PrimaryKeyArgName }} {{$field.PrimaryKeyArgName}},{{end}}{{end -}})
	if err != nil {
	    returnError(ctx, w, r, err)
	    return
	}

	writeRowsAffected(w, rowsAffected )
}
{{end}}
